-- Enable Row-Level Security
ALTER TABLE NITRE_PATIENT ENABLE ROW LEVEL SECURITY;

-- Create a new table for audit logging
CREATE TABLE NITRE_AUDIT_LOG (
    LOG_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TABLE_NAME VARCHAR2(30) NOT NULL,
    OPERATION VARCHAR2(10) NOT NULL,
    USER_ID VARCHAR2(30) NOT NULL,
    TIMESTAMP TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    OLD_VALUE CLOB,
    NEW_VALUE CLOB
);

-- Add encryption to sensitive columns
ALTER TABLE NITRE_PATIENT MODIFY (
    SSN ENCRYPT USING 'AES256',
    DRIVERS ENCRYPT USING 'AES256',
    PASSPORT ENCRYPT USING 'AES256'
);

-- Create a view for de-identified patient data
CREATE VIEW NITRE_PATIENT_DEIDENTIFIED AS
SELECT 
    PATIENT_ID,
    EXTRACT(YEAR FROM BIRTHDATE) AS BIRTH_YEAR,
    CASE 
        WHEN DEATHDATE IS NOT NULL THEN 'Deceased'
        ELSE 'Living'
    END AS LIFE_STATUS,
    MARITAL_STATUS_ID,
    RACE_ID,
    ETHNICITY_ID,
    GENDER_ID,
    BIRTH_PLACE_COUNTRY_ID,
    BIRTH_PLACE_STATE_ID,
    LIVING_PLACE_COUNTRY_ID,
    LIVING_PLACE_STATE_ID
FROM NITRE_PATIENT;

-- Create a function to mask sensitive data
CREATE OR REPLACE FUNCTION MASK_DATA(p_data VARCHAR2) RETURN VARCHAR2 IS
BEGIN
    RETURN RPAD('X', LENGTH(p_data), 'X');
END;
/

-- Create a policy for row-level security
CREATE OR REPLACE PACKAGE NITRE_SECURITY AS
    FUNCTION PATIENT_ACCESS_PREDICATE(schema_name IN VARCHAR2, table_name IN VARCHAR2) 
    RETURN VARCHAR2;
END NITRE_SECURITY;
/

CREATE OR REPLACE PACKAGE BODY NITRE_SECURITY AS
    FUNCTION PATIENT_ACCESS_PREDICATE(schema_name IN VARCHAR2, table_name IN VARCHAR2) 
    RETURN VARCHAR2
    IS
    BEGIN
        RETURN 'SYS_CONTEXT(''USERENV'', ''SESSION_USER'') = ''ADMIN'' OR ' ||
               'PATIENT_ID IN (SELECT PATIENT_ID FROM USER_PATIENTS WHERE USER_ID = SYS_CONTEXT(''USERENV'', ''SESSION_USER''))';
    END PATIENT_ACCESS_PREDICATE;
END NITRE_SECURITY;
/

-- Apply the security policy to the NITRE_PATIENT table
BEGIN
    DBMS_RLS.ADD_POLICY (
        object_schema   => 'YOUR_SCHEMA',
        object_name     => 'NITRE_PATIENT',
        policy_name     => 'PATIENT_ACCESS_POLICY',
        function_schema => 'YOUR_SCHEMA',
        policy_function => 'NITRE_SECURITY.PATIENT_ACCESS_PREDICATE',
        statement_types => 'SELECT, INSERT, UPDATE, DELETE'
    );
END;
/

-- Create triggers for audit logging
CREATE OR REPLACE TRIGGER NITRE_PATIENT_AUDIT_TRG
AFTER INSERT OR UPDATE OR DELETE ON NITRE_PATIENT
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO NITRE_AUDIT_LOG (TABLE_NAME, OPERATION, USER_ID, NEW_VALUE)
        VALUES ('NITRE_PATIENT', 'INSERT', SYS_CONTEXT('USERENV', 'SESSION_USER'), TO_CLOB(DBMS_LOB.SUBSTR(:NEW.PATIENT_ID || ',' || :NEW.FIRST_NAME || ',' || :NEW.LAST_NAME)));
    ELSIF UPDATING THEN
        INSERT INTO NITRE_AUDIT_LOG (TABLE_NAME, OPERATION, USER_ID, OLD_VALUE, NEW_VALUE)
        VALUES ('NITRE_PATIENT', 'UPDATE', SYS_CONTEXT('USERENV', 'SESSION_USER'), 
                TO_CLOB(DBMS_LOB.SUBSTR(:OLD.PATIENT_ID || ',' || :OLD.FIRST_NAME || ',' || :OLD.LAST_NAME)),
                TO_CLOB(DBMS_LOB.SUBSTR(:NEW.PATIENT_ID || ',' || :NEW.FIRST_NAME || ',' || :NEW.LAST_NAME)));
    ELSIF DELETING THEN
        INSERT INTO NITRE_AUDIT_LOG (TABLE_NAME, OPERATION, USER_ID, OLD_VALUE)
        VALUES ('NITRE_PATIENT', 'DELETE', SYS_CONTEXT('USERENV', 'SESSION_USER'), TO_CLOB(DBMS_LOB.SUBSTR(:OLD.PATIENT_ID || ',' || :OLD.FIRST_NAME || ',' || :OLD.LAST_NAME)));
    END IF;
END;
/

-- Create a procedure for data anonymization
CREATE OR REPLACE PROCEDURE ANONYMIZE_PATIENT_DATA AS
BEGIN
    UPDATE NITRE_PATIENT SET
        SSN = MASK_DATA(SSN),
        DRIVERS = MASK_DATA(DRIVERS),
        PASSPORT = MASK_DATA(PASSPORT),
        FIRST_NAME = 'ANONYMOUS',
        LAST_NAME = 'PATIENT',
        MAIDEN_NAME = NULL,
        ADDRESS = NULL,
        ZIP = NULL;
    COMMIT;
END;
/

-- Create an index to improve query performance
CREATE INDEX IDX_PATIENT_BIRTHDATE ON NITRE_PATIENT(BIRTHDATE);

-- Add a check constraint to ensure data integrity
ALTER TABLE NITRE_PATIENT ADD CONSTRAINT CHK_BIRTHDATE_DEATHDATE 
CHECK (DEATHDATE IS NULL OR DEATHDATE >= BIRTHDATE);

-- Grant minimal necessary privileges
GRANT SELECT ON NITRE_PATIENT_DEIDENTIFIED TO RESEARCHER_ROLE;
GRANT EXECUTE ON ANONYMIZE_PATIENT_DATA TO ADMIN_ROLE;

-- Implement data retention policy
CREATE OR REPLACE PROCEDURE APPLY_DATA_RETENTION_POLICY AS
BEGIN
    DELETE FROM NITRE_PATIENT 
    WHERE DEATHDATE IS NOT NULL AND DEATHDATE < ADD_MONTHS(SYSDATE, -84);
    COMMIT;
END;
/
